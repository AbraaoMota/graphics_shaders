<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400 

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

// Light intensity constant
float light_strength = 1.0;

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;
uniform float ambientCoefficent;
uniform float diffuseCoefficent;
uniform float specularCoefficent;

float pi = 3.1415926535897932384626433832795;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexInOut;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace; 
  vertexInOut.position_camSpace = vertex_camSpace;
  
  //Apply the model-view transformation to the normal (only rotation, no translation)
  //Normals put in the camera space
  vec3 surface_normal = normalize(normalMatrix * normal_worldSpace);
  vertexInOut.normal_camSpace = surface_normal;
  
  // Constants used in phong model
  vec3 lightPos_camSpace = lightPosition_camSpace.xyz;
  vec3 vertex_pos = vertex_camSpace.xyz;
  vec3 light_direction = normalize(lightPos_camSpace - vertex_pos);
  vec3 normalized_normal = normalize(surface_normal);
  vec3 vertex_to_camera = normalize(-vertex_pos);
  float dist_light = length(light_direction);
  float light_dist_constant = light_strength / (pow(dist_light, 2) * 4 * pi);

  // Calculate diffuse
  float dot_light_direction_normal = max(dot(normalized_normal, light_direction), 0);
  float diffusal = (diffuseCoefficent * dot_light_direction_normal) * light_dist_constant; 

  // Calculate specular
  float dot_light_specular_normal = dot(normalized_normal, light_direction);
  vec3 reflection_vec = normalize(2 * dot_light_specular_normal * surface_normal - light_direction);
  float v_dot_r = max(dot(vertex_to_camera, reflection_vec), 0);
  float specularity = (specularCoefficent * pow(v_dot_r, shininess)) * light_dist_constant;

  // Combine all
  vec4 ambience_vec = ambient * ambientCoefficent * 0.4 ;
  vec4 specular_vec = specular * specularity * 10;
  vec4 diffuse_vec = diffusal * diffuse * 10 ;
  vec4 vertexColor = ambience_vec + specular_vec + diffuse_vec;

  // Set color
  vertexInOut.color = vertexColor;
  
  //Texture coordinate
  vertexInOut.textureCoordinate = textureCoordinate_input;
  
  gl_Position = pMatrix * vertex_camSpace;
}




]]></vertex>
<geom>
<![CDATA[#version 400 

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexIn[3];

out fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

void main() {
  for (int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
    frag.position_camSpace = vertexIn[i].position_camSpace;
    frag.normal_camSpace = vertexIn[i].normal_camSpace;
    frag.textureCoordinate = vertexIn[i].textureCoordinate;
    frag.color = vertexIn[i].color;
	EmitVertex();
  }
  EndPrimitive();
 }




]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;
uniform float ambientCoefficent;
uniform float diffuseCoefficent;
uniform float specularCoefficent;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

out vec4 fragColor; 

//Fragment shader computes the final color
void main(void)
{




  fragColor =  frag.color;
}




]]></frag>
<R2TVert>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;

in vec4 vertex_worldSpace;
in vec2 textureCoordinate_input;

out vec2 varyingTextureCoordinate;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;

  varyingTextureCoordinate = textureCoordinate_input;
  gl_Position = pMatrix * vertex_camSpace;
}




]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

uniform sampler2D textureRendered;

in vec2 varyingTextureCoordinate;

out vec4 fragColor;

void main(void)
{
  //Render the texture on a quad
  fragColor = texture2D(textureRendered, varyingTextureCoordinate.st);
}




]]></R2TFrag>
</pipeline>
