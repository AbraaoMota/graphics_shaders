<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400 

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;
uniform float ambientCoefficent;
uniform float diffuseCoefficent;
uniform float specularCoefficent;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexInOut;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace; 
  vertexInOut.position_camSpace = vertex_camSpace;
  
  //Apply the model-view transformation to the normal (only rotation, no translation)
  //Normals put in the camera space
  vertexInOut.normal_camSpace = normalize(normalMatrix*normal_worldSpace);
  
  //Color chosen as red
  vertexInOut.color = vec4(1.0, 0.0, 0.0, 1.0);
  
  //Texture coordinate
  vertexInOut.textureCoordinate = textureCoordinate_input;
  
  gl_Position = pMatrix * vertex_camSpace;
}
]]></vertex>
<geom>
<![CDATA[#version 400 

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

uniform int time;

in data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexIn[3];

out fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

void main() {
  for (int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
    frag.position_camSpace = vertexIn[i].position_camSpace;
    frag.normal_camSpace = vertexIn[i].normal_camSpace;
    frag.textureCoordinate = vertexIn[i].textureCoordinate;
    frag.color = vertexIn[i].color;
	EmitVertex();
  }
  EndPrimitive();
 }
]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;
uniform float ambientCoefficent;
uniform float diffuseCoefficent;
uniform float specularCoefficent;

uniform vec3 hsv;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

out vec4 fragColor; 

//Fragment shader computes the final color
void main(void)
{

//  float max1 = max(frag.color.r, frag.color.g);
//  float maxRGB = max(max1, frag.color.b);
//  float min1 = min(frag.color.r, frag.color.g);
//  float minRGB = min(max1, frag.color.b);

//  float value = 	maxRGB;
//  float saturation = (maxRGB - minRGB)/ maxRGB;

	float hue = hsv.x;
	float saturation = hsv.y;
	float value = hsv.z;

	float chroma = value * saturation;
	int newHue = int(floor(hue / 60));
	float X = chroma * (1 - abs(newHue % 2 - 1));	

	float r1;
	float g1;
	float b1;
	if (newHue < 0 || newHue > 6) {
		r1 = 0;
		g1 = 0;
		b1 = 0;
	} else if (newHue < 1 && newHue >= 0) {
		r1 = chroma;
		g1 = X;
		b1 = 0;
	} else if (newHue < 2 && newHue >= 1) {
		r1 = X;
		g1 = chroma;
		b1 = 0;
	} else if (newHue < 3 && newHue >= 2) {
		r1 = 0;
		g1 = chroma;
		b1 = X;
	} else if (newHue < 4 && newHue >= 3) {
		r1 = 0;
		g1 = X;
		b1 = chroma;
	} else if (newHue < 5 && newHue >= 4) {
		r1 = X;
		g1 = 0;
		b1 = chroma;
	} else if (newHue < 6 && newHue >= 5) {
		r1 = chroma;
		g1 = 0;
		b1 = X;
	}

	float colorM	atch = value - chroma;
	
	vec4 rgba = vec4(r1 + colorMatch, g1 + colorMatch, b1 + colorMatch, 1.0);

//	fragColor =  frag.color;
	fragColor =  rgba;
}
]]></frag>
<R2TVert>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;

in vec4 vertex_worldSpace;
in vec2 textureCoordinate_input;

out vec2 varyingTextureCoordinate;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;

  varyingTextureCoordinate = textureCoordinate_input;
  gl_Position = pMatrix * vertex_camSpace;
}
]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

uniform sampler2D textureRendered;

in vec2 varyingTextureCoordinate;

out vec4 fragColor;

void main(void)
{
  //Render the texture on a quad
  fragColor = texture2D(textureRendered, varyingTextureCoordinate.st);
}
]]></R2TFrag>
</pipeline>
