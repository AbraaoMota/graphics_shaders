<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn;

//Vertex shader compute the vectors per vertex
void main(void)
{
    //Put the vertex in the correct coordinate system by applying the model view matrix
    vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;
	vertexIn.position_camSpace = vertex_camSpace;
	
    //Apply the model-view transformation to the normal (only rotation, no translation)
    //Normals put in the camera space
    vertexIn.normal_camSpace = normalize(normalMatrix*normal_worldSpace);

	//Color chosen as red
	vertexIn.color = vec4(1.0,0.0,0.0,1.0);
    
    //Texture coordinate
    vertexIn.textureCoordinate = textureCoordinate_input;
	
    gl_Position = pMatrix * vertex_camSpace;
}































]]></vertex>
<geom>
<![CDATA[#version 400

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space


in data
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
}vertexIn[3];

out fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


void main() {
  for(int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
	frag.position_camSpace = vertexIn[i].position_camSpace;
	frag.normal_camSpace = vertexIn[i].normal_camSpace;
	frag.textureCoordinate = vertexIn[i].textureCoordinate;
	frag.color = vertexIn[i].color;
    EmitVertex();
  }
  EndPrimitive();
}






























]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
	vec4 position_camSpace;
	vec3 normal_camSpace;
	vec2 textureCoordinate;
	vec4 color;
} frag;


out vec4 fragColor;

//Fragment shader computes the final color
void main(void)
{
	//Not used in that task
    fragColor =  frag.color;
}

















]]></frag>
<R2TVert>
<![CDATA[#version 400
#extension GL_ARB_separate_shader_objects : enable

uniform mat4 mMatrix;
uniform mat4 mvMatrix;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;

out vec3 dir; 

void  main () 
{ 
	vec4 vertex_modelSpace = mMatrix*vertex_worldSpace;
	
    dir = normalize ( vec3 ( vertex_modelSpace.x * 1.6,  vertex_modelSpace.y , -1.0 )); 
	
    gl_Position  = vertex_modelSpace; 
}































]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

in vec3 dir; 
out vec4 outcolour;

uniform mat4 mMatrix;
uniform mat4 mvMatrix;
uniform mat4 mvMatrixScene;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

const int raytraceDepth = 42;
const int numSpheres = 6;
const float pi = 3.1415926535897932384626433832795;

// Preset Colours
const vec3 black = vec3(0,0,0);
const vec3 white = vec3(1,1,1);

///////////////////////////////
// LIGHTING
//
// SOFT SHADOWS EXTENSION FLAG
bool soft_shadows = false; // Enabling this flag cuts performance by half

// Normal light position
const vec3 light_pos = vec3(6,4, -0.5);

// Soft shadow lighting positions
const vec3 ss_light_1 = vec3(5, 4, 0.2);
const vec3 ss_light_2 = vec3(7, 4, 0.2);
const vec3 ss_light_3 = vec3(5, 4, 1.2);
const vec3 ss_light_4 = vec3(7, 4, 1.2);

// Bias constant
const float epsilon = 0.000001;

// Reflectivity constant
const float k_reflect = 0.8;

// Diffuse strength
const float k_d = 120;

// Checkerboard square size
const int square_size = 15;

// Camera filter constant
const float cam_filter = 0.35;

//example data structures
struct Ray
{
	vec3 origin;
	vec3 dir;
};
struct Sphere
{
	vec3 centre;
	float radius;
	vec3 colour;
};
struct Plane
{
	vec3 point;
	vec3 normal;
	vec3 colour;
};

struct Intersection
{
    float t; //closest hit
    vec3 point;	// hit point
    vec3 normal;	// normal
    int hit;	//did it hit?
    vec3 colour; // colour accumulation, can be also implemented in struct Ray
};

void plane_intersect(Plane pl, Ray ray, inout Intersection intersect)
{
	vec3 point_to_plane = ray.origin - pl.point;
	float p2plane_dot_normal = dot(point_to_plane, pl.normal);
	float direction_dot_normal = dot(ray.dir, pl.normal);
	float dist = -(p2plane_dot_normal / direction_dot_normal);

	if (dist > 0 && ((dist < intersect.t) || intersect.t == -1 )) {
		intersect.t = dist;	
		intersect.hit = 1;
		intersect.normal = pl.normal;
		vec3 new_point = ray.origin + (dist * ray.dir);
		intersect.point = new_point;
		int x = int(floor(new_point.x * square_size));
		int z = int(floor(new_point.z * square_size));
		if ((x + z) % 2 == 0) {
			intersect.colour *= black;
		} else {
			intersect.colour *= white;
		}
	}
}

void sphere_intersect(Sphere sph, Ray ray, inout Intersection intersect)
{ 
	vec3 delta_p = ray.origin - sph.centre;
	float d_dot_delta_p = dot(ray.dir, delta_p);
	float discrim = pow(d_dot_delta_p, 2) - pow(length(delta_p), 2) + pow(sph.radius, 2);
	if (discrim > 0) {	
		float dist_1 = -d_dot_delta_p + sqrt(discrim);
		float dist_2 = -d_dot_delta_p - sqrt(discrim);

		if (dist_2 > 0 && (dist_2 < intersect.t || intersect.t == -1)) {				
			intersect.hit = 1;
			intersect.t = dist_2;
			intersect.point = ray.origin + (dist_2 * ray.dir);
			intersect.normal = normalize(intersect.point - sph.centre);
			intersect.colour *= sph.colour;
		}
	}
}

Sphere sphere[numSpheres];
Plane plane;

void Intersect(Ray r, inout Intersection i)
{
	// Intersect spheres in increasing distance
	for (int j = 0; j < numSpheres; j++) {
		sphere_intersect(sphere[numSpheres - j - 1], r, i);
	}
	plane_intersect(plane, r, i);
}

//vec3 phong_shader(Intersection intersect)
vec3 phong_shader(Intersection intersect, vec3 light_position)
{
	// This shader is only really doing diffuse shading, the other effects are not visible
	float dist_light = length(light_position - intersect.point);
	vec3 light_direction = normalize(light_position - intersect.point);
	return (k_d * dot(intersect.normal, light_direction) / pow(dist_light, 2)) * intersect.colour;
}

vec3 computeShadow(Intersection intersect)
{
	if (!soft_shadows) {
		// Initialize ray from point to light source
		Ray point_to_light;
		point_to_light.dir = normalize(light_pos - intersect.point);
		point_to_light.origin = intersect.point + epsilon * intersect.normal;

		// Create fresh object to calculate if shadowed point or not
		Intersection shadow_intersection;
		shadow_intersection.hit = 0;
	    shadow_intersection.t = -1;
		shadow_intersection.colour = vec3(0,0,0); 
		shadow_intersection.point = vec3(0,0,0);
		shadow_intersection.normal = vec3(0,0,0);
	
		Intersect(point_to_light, shadow_intersection);
	
		// Multiply by black if shadowed, calculate diffuse otherwise
		if (shadow_intersection.hit == 1) {
			return black;
		} else {
			return phong_shader(intersect, light_pos);
		}
	} else {
		const int light_source_count = 5;
		vec3 light_source[light_source_count];
		light_source[0] = ss_light_1;
		light_source[1] = ss_light_2;
		light_source[2] = ss_light_3;
		light_source[3] = ss_light_4;
		light_source[4] = light_pos;

		vec3 soft_shadow = vec3(0,0,0);

		for (int i = 0; i < light_source_count; i++) {
			Ray point_to_light;
			point_to_light.dir = normalize(light_source[i] - intersect.point);
			point_to_light.origin = intersect.point + epsilon * intersect.normal;
	
			// Create fresh object to calculate if shadowed point or not
			Intersection shadow_intersection;
			shadow_intersection.hit = 0;
		    shadow_intersection.t = -1;
			shadow_intersection.colour = vec3(0,0,0); 
			shadow_intersection.point = vec3(0,0,0);
			shadow_intersection.normal = vec3(0,0,0);
		
			Intersect(point_to_light, shadow_intersection);
		
			// Multiply by black if shadowed, calculate diffuse otherwise
			if (shadow_intersection.hit == 1) {
				soft_shadow += black;
			} else {
				soft_shadow += phong_shader(intersect, light_source[i]);
			}
		}
		return soft_shadow / light_source_count;
	}
}

int seed = 0;
float rnd()
{
	seed = int(mod(float(seed)*1364.0+626.0, 509.0));
	return float(seed)/509.0;
}

void main()
{
	//please leave the scene config unaltered for marking 
	sphere[0].centre   = vec3(-2.0, 1.5, -3.5);
	sphere[0].radius   = 1.5;
	sphere[0].colour = vec3(0.8,0.8,0.8);
	sphere[1].centre   = vec3(-0.5, 0.0, -2.0);
	sphere[1].radius   = 0.6;
	sphere[1].colour = vec3(0.3,0.8,0.3);
	sphere[2].centre   = vec3(1.0, 0.7, -2.2);
	sphere[2].radius   = 0.8;
	sphere[2].colour = vec3(0.3,0.8,0.8);
	sphere[3].centre   = vec3(0.7, -0.3, -1.2);
	sphere[3].radius   = 0.2;
	sphere[3].colour = vec3(0.8,0.8,0.3);
	sphere[4].centre   = vec3(-0.7, -0.3, -1.2);
	sphere[4].radius   = 0.2;
	sphere[4].colour = vec3(0.8,0.3,0.3);
	sphere[5].centre   = vec3(0.2, -0.2, -1.2);
	sphere[5].radius   = 0.3;
	sphere[5].colour = vec3(0.8,0.3,0.8);
	plane.point = vec3(0,-0.5, 0);
	plane.normal = vec3(0, 1.0, 0);
	plane.colour = vec3(1, 1, 1);
	seed = int(mod(dir.x * dir.y * 39786038.0, 65536.0));
	//scene definition end

	// Initialize ray position and direction
	Ray ray;
	// Scene starts way too far ahead of the spheres, move it back by 40 units
	vec3 scene_start_offset = vec3(0,0, -30.4);
	ray.origin = -(mvMatrixScene * vec4(0,0,0, 1)).xyz + scene_start_offset;

	// Extract rotation from mvMatrix
	// Scale vectors
	float s_x = length(vec3(mvMatrixScene[0][0], mvMatrixScene[1][0], mvMatrixScene[2][0]));
	float s_y = length(vec3(mvMatrixScene[0][1], mvMatrixScene[1][1], mvMatrixScene[2][1]));
	float s_z = length(vec3(mvMatrixScene[0][2], mvMatrixScene[1][2], mvMatrixScene[2][2]));

	// Generate rotation matrix	
	mat4 rot_matrix = mat4((mvMatrixScene[0]/s_x).xyz, 0,
						   (mvMatrixScene[1]/s_y).xyz, 0,
						   (mvMatrixScene[2]/s_z).xyz, 0,
						   0, 0, 0, 1);
	// Apply ray direction given mouse movement
	ray.dir = (rot_matrix * vec4(normalize(dir), 0)).xyz;

	// Scene colour starts completely black
	vec3 colour = black;
	
	// Decreasing constant for ray strength on every reflection
	float rayStrength = 1.0;

	// Intersection object initialization 
	Intersection intersection;
	intersection.point = vec3(0,0,0);
	intersection.colour = vec3(1);

	for (int i = 0; i < raytraceDepth; i++) {
		// Reset hit status on intersection object
	    intersection.t = -1;
		intersection.normal = vec3(0,0,0);

		// Initial intersection
		Intersect(ray, intersection);
		if (intersection.hit == 0) {
			break;
		}
		// Shadow & diffuse shading
		vec3 local_shading = computeShadow(intersection);

		// Colour 
		colour += local_shading * k_reflect * rayStrength;

		// Decrease strength of reflected ray
		rayStrength *= k_reflect;

		// Reflect the ray
		ray.origin = intersection.point + epsilon * intersection.normal;
		ray.dir = reflect(ray.dir, normalize(intersection.normal));	
	}

	// Extract final colours and dim scene using the camera filter
	vec4 final_colour = vec4(colour.x, colour.y, colour.z, 1) * cam_filter;
	outcolour = final_colour;
}










]]></R2TFrag>
</pipeline>
