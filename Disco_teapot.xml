<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400 

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;
uniform float ambientCoefficent;
uniform float diffuseCoefficent;
uniform float specularCoefficent;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexInOut;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace; 
  vertexInOut.position_camSpace = vertex_camSpace;
  
  //Apply the model-view transformation to the normal (only rotation, no translation)
  //Normals put in the camera space
  vertexInOut.normal_camSpace = normalize(normalMatrix*normal_worldSpace);
  
  //Color chosen as red
  vertexInOut.color = vec4(1.0, 0.0, 0.0, 1.0);
  
  //Texture coordinate
  vertexInOut.textureCoordinate = textureCoordinate_input;
  
  gl_Position = pMatrix * vertex_camSpace;
}



]]></vertex>
<geom>
<![CDATA[#version 400 

layout(triangles) in;
layout(triangle_strip, max_vertices = 64) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

uniform int subDivision;

in data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexIn[3];

out fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

void main() {

// Apply an up and down algorithm
// It covers from the bottom of the triangle upwards
// On each iteration it creates a triangle strip that converges to just a triangle 
// on the last layer
// Every 'up' movement moves up (and diagonally to the 'left' of the triangle
// whilst every down movement moves directly downwards
// This uses a percentile calculated on the barycentric co-ordinates of the triangle
// which is dependent on the level of subdivisions applied
// Assume we start at barycentric point (1,0,0);
float alpha = 1.0;
float beta = 0.0;
float gamma = 0.0;
for (int i = 0; i < pow(2, subDivision); i++) {

//	gl_Position = alpha * gl_in[0].gl_Position + (beta * gl_in[1].gl_Position - alpha * gl_in[0].gl_Position) + (gamma * gl_in[2].gl_Position - alpha * gl_in[0].gl_Position) ;
    gl_Position = alpha * gl_in[0].gl_Position + beta * gl_in[1].gl_Position + gamma * gl_in[2].gl_Position;
	EmitVertex();

	for (int j = 0; j < pow(2, subDivision) - i; j++) {
		// Start with the upwards movement
		beta = beta + (1 / i);
		alpha = 1 - beta;
//		gl_Position = alpha * gl_in[0].gl_Position + (beta * gl_in[1].gl_Position - alpha * gl_in[0].gl_Position);
    gl_Position = alpha * gl_in[0].gl_Position + beta * gl_in[1].gl_Position + gamma * gl_in[2].gl_Position;

		EmitVertex();		
		// Downwards movement
		gamma = gamma + (1 / i);
		beta = beta - (1 / i);
		alpha = 1 - gamma;
//		gl_Position = alpha * gl_in[0].gl_Position + (gamma * gl_in[2].gl_Position - alpha * gl_in[0].gl_Position);
    gl_Position = alpha * gl_in[0].gl_Position + beta * gl_in[1].gl_Position + gamma * gl_in[2].gl_Position;

		EmitVertex();
	}
	
	beta = beta + (1 / subDivision);
	alpha = 1 - beta;

	// Set fragment properties
    frag.position_camSpace = alpha * vertexIn[0].position_camSpace + beta * vertexIn[1].position_camSpace + gamma * vertexIn[2].position_camSpace;
    frag.normal_camSpace = vertexIn[0].normal_camSpace;
    frag.textureCoordinate = vertexIn[0].textureCoordinate;
    frag.color = alpha * vertexIn[0].position_camSpace + beta * vertexIn[1].position_camSpace + gamma * vertexIn[2].position_camSpace;
	// Move onto the next strip
	EndPrimitive();
}


  //for (int i = 0; i < 3; i++) { // You used triangles, so it's always 3
//    gl_Position = gl_in[i].gl_Position;
//    frag.position_camSpace = vertexIn[i].position_camSpace;
//    frag.normal_camSpace = vertexIn[i].normal_camSpace;
//    frag.textureCoordinate = vertexIn[i].textureCoordinate;
//    frag.color = vertexIn[i].color;
//	EmitVertex();

//	gl_Position = gl_in[i].gl_Position + 0.5 * (gl_in[(i+1) % 3].gl_Position - gl_in[i].gl_Position);
//	EmitVertex();

//	gl_Position = gl_in[i].gl_Position + 0.5 * (gl_in[(i-1) % 3].gl_Position - gl_in[i].gl_Position);
//	EmitVertex();

//    EndPrimitive();

//  }

//  gl_Position = gl_in[0].gl_Position;
//    frag.position_camSpace = vertexIn[0].position_camSpace;
//    frag.normal_camSpace = vertexIn[0].normal_camSpace;
//    frag.textureCoordinate = vertexIn[0].textureCoordinate;
//    frag.color = vertexIn[0].color;
//  EmitVertex();
//  gl_Position = gl_in[0].gl_Position + 0.5 * (gl_in[1].gl_Position - gl_in[0].gl_Position);
//  EmitVertex();
//  gl_Position = gl_in[0].gl_Position + 0.5 * (gl_in[2].gl_Position - gl_in[0].gl_Position);
//  EmitVertex();
//  EndPrimitive();


//  gl_Position = gl_in[0].gl_Position + 0.5 * (gl_in[2].gl_Position - gl_in[0].gl_Position);
//    frag.position_camSpace = vertexIn[0].position_camSpace;
//    frag.normal_camSpace = vertexIn[0].normal_camSpace;
//    frag.textureCoordinate = vertexIn[0].textureCoordinate;
//    frag.color = vertexIn[0].color;
//  EmitVertex();
//  gl_Position = gl_in[0].gl_Position + 0.5 * (gl_in[1].gl_Position - gl_in[0].gl_Position);
//  EmitVertex();
//  gl_Position = gl_in[1].gl_Position + 0.5 * (gl_in[2].gl_Position - gl_in[1].gl_Position);
//  EmitVertex();
//  EndPrimitive();


//  gl_Position = gl_in[0].gl_Position + 0.5 * (gl_in[2].gl_Position - gl_in[0].gl_Position);
//    frag.position_camSpace = vertexIn[0].position_camSpace;
//    frag.normal_camSpace = vertexIn[0].normal_camSpace;
//    frag.textureCoordinate = vertexIn[0].textureCoordinate;
//    frag.color = vertexIn[0].color;
//  EmitVertex();
//  gl_Position = gl_in[1].gl_Position + 0.5 * (gl_in[2].gl_Position - gl_in[1].gl_Position);
//  EmitVertex();
//  gl_Position = gl_in[2].gl_Position;
//  EmitVertex();
//  EndPrimitive();


//  gl_Position = gl_in[0].gl_Position + 0.5 * (gl_in[1].gl_Position - gl_in[0].gl_Position);
//    frag.position_camSpace = vertexIn[0].position_camSpace;
//    frag.normal_camSpace = vertexIn[0].normal_camSpace;
//    frag.textureCoordinate = vertexIn[0].textureCoordinate;
//    frag.color = vertexIn[0].color;
//  EmitVertex();
//  gl_Position = gl_in[1].gl_Position;
//  EmitVertex();
//  gl_Position = gl_in[1].gl_Position + 0.5 * (gl_in[2].gl_Position - gl_in[1].gl_Position);
//  EmitVertex();
//  EndPrimitive();

}	



]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;
uniform float ambientCoefficent;
uniform float diffuseCoefficent;
uniform float specularCoefficent;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

out vec4 fragColor; 

//Fragment shader computes the final color
void main(void)
{
  fragColor =  frag.color;
}



]]></frag>
<R2TVert>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;

in vec4 vertex_worldSpace;
in vec2 textureCoordinate_input;

out vec2 varyingTextureCoordinate;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;

  varyingTextureCoordinate = textureCoordinate_input;
  gl_Position = pMatrix * vertex_camSpace;
}



]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

uniform sampler2D textureRendered;

in vec2 varyingTextureCoordinate;

out vec4 fragColor;

void main(void)
{
  //Render the texture on a quad
  fragColor = texture2D(textureRendered, varyingTextureCoordinate.st);
}



]]></R2TFrag>
</pipeline>
