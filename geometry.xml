<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[#version 400 

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;
uniform float ambientCoefficent;
uniform float diffuseCoefficent;
uniform float specularCoefficent;

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexInOut;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace; 
  vertexInOut.position_camSpace = vertex_camSpace;
  
  //Apply the model-view transformation to the normal (only rotation, no translation)
  //Normals put in the camera space
  vertexInOut.normal_camSpace = normalize(normalMatrix*normal_worldSpace);
  
  //Color chosen as red
  vertexInOut.color = vec4(1.0, 0.0, 0.0, 1.0);
  
  //Texture coordinate
  vertexInOut.textureCoordinate = textureCoordinate_input;
  
  gl_Position = pMatrix * vertex_camSpace;
}
]]></vertex>
<geom>
<![CDATA[#version 400 

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

uniform int subDivisionLevel; // depth of subdivision


in data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexIn[3];

out fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;


void main() {
  //for (int i = 0; i < 3; i++) { // You used triangles, so it's always 3
	// Assume the three vertices we have have Barycentric coordinates of
	// (1,0,0), (0,1,0) and (0, 0, 1) respectively
	// We need to get cartesian co-ordinates of their centre-points
	// these lie at points (0.5, 0.5, 0), (0, 0.5, 0.5), (0.5, 0, 0.5) respectively
	// Call given Vertices A, B, C. Vertex between A and B is a_b, Between B and C
    // is b_c, and between C and A is a_c.
	// We need to draw 4 triangles given an initial 3 vertices, and depth level is 
 	// the recursion level of creating vertices

	vec4 vertex_1 = vertexIn[0].position_camSpace;
	vec4 vertex_2 = vertexIn[1].position_camSpace;
	vec4 vertex_3 = vertexIn[2].position_camSpace;
	
	vec4 vec_1_2 = vertex_2 - vertex_1;
	vec4 vec_1_3 = vertex_3 - vertex_1;
	vec4 vec_2_3 = vertex_3 - vertex_2;

	vec4 vertex_1_2 = vertex_1 + 0.5 * (vec_1_2);
	vec4 vertex_1_3 = vertex_1 + 0.5 * (vec_1_3);
	vec4 vertex_2_3 = vertex_2 + 0.5 * (vec_2_3);

	vec4[] vectors_to_visit = vec4[](
							   vertex_1,
							   vertex_1_2,
							   vertex_1_3, 
							   vertex_3,
							   vertex_2_3,
							   vertex_2,
							   vertex_1_2,
							   vertex_1_3,
							   vertex_2_3
							  );
//	vec4[] visited_vectors;
	for(int i = 0; i < vectors_to_visit.length(); i++) {

//		vec4[] bigTri = vec4[](vec4(), vec4(), vec4());
//      for (int m = 0; m < 3; m++) {
//		}

		gl_Position = gl_in[i].gl_Position;
		frag.position_camSpace = vectors_to_visit[i];
		frag.normal_camSpace = vertexIn[0].normal_camSpace;
		frag.textureCoordinate = vertexIn[0].textureCoordinate;
		frag.color = vertexIn[0].color;
		frag.color = vec4(1.0, 0.0, 0.0, 1.0);
		EmitVertex();
		if (i % 3 == 0) {
			if (i != 0) {
				EndPrimitive();
			}
			EmitVertex();
		}
	}	

    //gl_Position = gl_in[i].gl_Position;
    //frag.position_camSpace = vertexIn[i].position_camSpace;
    //frag.normal_camSpace = vertexIn[i].normal_camSpace;
    //frag.textureCoordinate = vertexIn[i].textureCoordinate;
    //frag.color = vertexIn[i].color;
	//EmitVertex();
  //}
  //EndPrimitive();
 }
]]></geom>
<frag>
<![CDATA[#version 400

uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;
uniform float ambientCoefficent;
uniform float diffuseCoefficent;
uniform float specularCoefficent;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

out vec4 fragColor; 

//Fragment shader computes the final color
void main(void)
{
  fragColor =  frag.color;
}
]]></frag>
<R2TVert>
<![CDATA[#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;

in vec4 vertex_worldSpace;
in vec2 textureCoordinate_input;

out vec2 varyingTextureCoordinate;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;

  varyingTextureCoordinate = textureCoordinate_input;
  gl_Position = pMatrix * vertex_camSpace;
}
]]></R2TVert>
<R2TFrag>
<![CDATA[#version 400

uniform sampler2D textureRendered;

in vec2 varyingTextureCoordinate;

out vec4 fragColor;

void main(void)
{
  //Render the texture on a quad
  fragColor = texture2D(textureRendered, varyingTextureCoordinate.st);
}
]]></R2TFrag>
</pipeline>
